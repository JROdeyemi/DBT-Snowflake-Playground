version: 2

models:
  - name: customers
    description: One record per customer
    columns:
      - name: customer_id
        description: Primary key
        tests:
          - unique
          - not_null
          - relationships:
              to: ref{'stg_customers'}
              field:  customer_id
          - dbt_utils.cardinality_equality:
              field: customer_id
              to: ref('stg_customers')
      - name: first_order_date
        description: NULL when a customer has not yet placed an order.

  - name: stg_customers
    description: This model cleans up customer data and creates one unique customer per row.
    columns:
      - name: customer_id
        description: Primary key
        tests:
          - unique
          - not_null

  - name: stg_orders
    description: This model cleans up order data and creates one order per row
    columns:
      - name: order_id
        description: Primary key
        tests:
          - unique
          - not_null
      - name: status
        description: "{{ doc('order_status') }}"
        tests:
          - accepted_values:
              values: ['placed', 'shipped', 'completed', 'return_pending', 'returned']
      - name: customer_id
        description: Foreign key to stg_customers.customer_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_customers')
              field: customer_id
  - name: orders_by_customer_9
    description: Trash model to experiment Advanced testing, Tracks the total orders each customer has made
    columns:
      - name: customer_id
        description: Unique identifier for each customer that has placed an order
        tests:
          - unique 
          - not_null 

  - name: fct_orders
    description: Matches each order to customer
    tests:
      - dbt_utils.expression_is_true:
          expression: "amount > 5"
    access: public
    latest_version: 1
    config:
      contract:
        enforced: true
      group: finance
    columns:
      - name: order_id
        description: Unique identifier for each order
        data_type: number
        constraints:
          - type: not_null
      - name: customer_id
        description: Identifier for each customer. Not unique, as customers can have multiple orders
        data_type: number
        constraints:
          - type: not_null
        tests:
          - unique:
              config:
                where: "order_date > '2018-03-01'"
                severity: warn
                error_if: ">30"
                warn_if: ">5"
                limit: 10
                store_failures: true
                schema: test_failures
      - name: order_date
        description: Date at which the customer placed the specific order
        data_type: date
        constraints:
          - type: not_null 
      - name: amount
        description: The amount at which order was sold to the customer
        data_type: number
        constraints:
          - type: not_null
        tests:
          - assert_column_is_greater_than_five
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              row_condition: "order_id is not null"
              strictly: False
    versions:
      - v: 1
        config:
          alias: fct_orders
      - v: 2
        columns:
          - name: Total
            description: The total amount paid by the customer for the order
            data_type: number
          - include: all
            exclude: [amount]

seeds:
  - name: employees
    description: A manual map of employees to customers
    columns:
      - name: employee_id
        tests:
          - unique
          - not_null